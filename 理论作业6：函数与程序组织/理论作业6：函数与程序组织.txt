1.

A) 向函数传递输入型参数有哪几种方式，各有什么优缺点？（学号为奇数的学生解答）
B) 向函数传递输入输出型参数有哪几种方式，各有什么优缺点？（学号为偶数的学生解答）
    B: 向函数传递指针参数(int *x)或传递引用参数(int& x)
    指针参数：
        优点：
            在函数内部的操作可直接影响外界变量的值（既是优点又是缺点）。
            指针可直接做运算，带来一定便利。
            指针在定义后仍可改变（而引用在定义后，其所指的地址无法被改变）（既是缺点又是优点）。
            指针可以有多级。
            指针可以为NULL。
        缺点：
            调用时常需要"*"或者"&"，读和写代码不便。
            无法使用sizeof等工具直接得出指针所指对象的信息。
            指针单独占用一定内存区域（而引用不需要单独占用内存）。
            易带来安全风险。
    引用参数：
        优点：
            在函数内部的操作可直接影响外界变量的值（既是优点又是缺点）。
            可理解为指针操作的一种语法糖，不需要频繁使用"*"获取值，读写代码方便。
            不独立占用内存。
            安全性优于指针。
        缺点：
            灵活性不及指针。

2. 函数的处理结果可通过返回值、输入输出型参数和全局变量等多种方式传递，分析这几种方式的优缺点。
    返回值：
        优点：直截了当，无需输入输出型参数的"*"与"&"等操作
        缺点：对于大对象的频繁传参，每次向函数中复制其内容可带来较大硬件开销。

    输入输出型参数：
        优点：降低复制对象的开销；指针可传递多层引用。
        缺点：代码比直接返回值略微复杂；指针的使用常带来安全风险。

    全局变量：
        优点：多个函数访问同一数据时，使用全局变量可减少变量个数和传参次数。
        缺点：全局变量极易增大耦合，降低代码可读性。在跨模块使用时应谨慎。全局变量通常保存在内存中的静态存储区，生存期长，可能占用较多内存。

3. 画出下面程序递归层次最深时的函数调用堆栈

#include <iostream>
unsigned int fib(unsigned int n) {
   if (n <= 1) return n;
   auto a = fib(n-2);
   auto b = fib(n-1);
   return a + b;
}

int main() {
   auto a = 5U;
   std::cout << fib(a);
   return 0;
}


main:
    a = 5;
    fib(5):
        fib(4):
            fib(3):
                fib(2):
                    fib(1):
                        return 1;