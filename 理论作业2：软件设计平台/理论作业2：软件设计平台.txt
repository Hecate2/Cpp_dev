2.1 辨析以下概念的异同。

  (1) 并发与并行
  	并发：使用同一个硬件分时处理多项不同任务。任一时刻只有一项任务被执行，或者正在切换任务。由于每项任务每次被执行的时间片很短，看起来就像是多项任务同时执行。
  	并行：使用多个硬件同时处理多项任务。任一时刻都有多项任务正在被同时执行。

  	同：在表面上（宏观尺度的时间上）看起来，都像是多个任务同时被执行。
  	异：任意时刻有多项任务被执行，还是只有一项任务被执行。

  (2) 进程与线程
  	进程：拥有独立数据、程序指令和控制块，可独立申请硬件资源的执行单位。每个进程可与其他进程形成并发。
  	线程：比线程更小的执行单位。一个进程内的多个线程共享整个进程的数据、信号等。但每个线程可以有独立的栈和程序指令流，独立控制CPU的寄存器。

  	同：进程与线程都可与其他进程或线程构成并发。不同进程或线程都可执行不同的程序指令。
  	异：多个线程可视为一个进程内部的并发。一个进程内的多个线程可共享进程的资源。
 

2.2 举例说明命令式语言和声明式语言的不同编程风格。
	命令式：
	// C语言，阶乘
	int factorial(int n)
	{
		int ans;
		for(ans=1; n>0; --n)
		{
			ans*=n;
		}
		return ans
	}

	# Python，找指定数据
	class Student:
		def __init__(id,name,score):
			self.id=id
			self.name=name
			self.score=score

	def find_excellent_students(table_of_students):
		return [student.id for student in table_of_students if student.score < 60]

	声明式：
	// Prolog语言，阶乘
	factorial(0,1)
	factorial(N,Ans):-   M is N-1, factorial(M,Ansm), Ans is N * Ansm.

	# SQL，找指定数据
	SELECT 学号(列名) FROM 学生(表名) WHERE 成绩(列名) < 60;

	命令式语言用明确的指令来控制所有数据，而声明式语言仅需确定最终目标。声明式语言的具体实现算法由执行引擎自行确定。
	例如C语言求阶乘的过程明确使用循环，将每个小于n的正整数乘起来。而Prolog语言仅描述了阶乘的定义：1的阶乘等于0，其他数的阶乘等于这个数乘以((这个数-1)的阶乘)。
	又例如Python寻找指定学生时，明确使用循环将每个学生与指标做比较。而SQL只需要输入最终目标。具体寻找过程将由数据库引擎完成。